import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
from PIL import Image

# Function to load images and convert them to three-channel
def load_and_preprocess_image(image_path):
    img = Image.open(image_path).convert('L')  # Convert to grayscale
    img = img.resize((224, 224))  # DenseNet expects input size of 224x224
    img_array = np.array(img)
    img_array = np.stack([img_array]*3, axis=-1)  # Stack grayscale image into three channels
    img_array = img_array / 255.0  # Normalize to [0, 1] range
    return img_array

# Load your handwritten X and non-X images for training
welding_safe_images = [load_and_preprocess_image(f"welding_safe_image_{i}.jpg") for i in range(1, 11)]
welding_hole_images = [load_and_preprocess_image(f"welding_hole_image_{i}.jpg") for i in range(1, 11)]

# Labels: welding_safe_images -> 1, welding_hole_images -> 0
labels = np.concatenate([np.ones(len(welding_safe_images)), np.zeros(len(welding_hole_images))])
images = np.array(welding_safe_images + welding_hole_images)

# Shuffle the dataset
indices = np.arange(len(images))
np.random.shuffle(indices)
images = images[indices]
labels = labels[indices]

# Define the model using DenseNet121 as the base
base_model = tf.keras.applications.DenseNet121(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
base_model.trainable = False  # Freeze the base model

model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),  # Use global average pooling to reduce the number of parameters
    layers.Dense(64, activation='relu'),
    layers.Dense(2, activation='sigmoid')  # Output layer with 2 neurons for binary classification
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train the model with your data
model.fit(images, labels, epochs=10, batch_size=4)

# Load and preprocess new test images
new_test_images = [load_and_preprocess_image(f"new_test_image_{i}.jpg") for i in range(1, 5)]
new_test_images = np.array(new_test_images)


# Predict and evaluate
predictions = model.predict(new_test_images)
true_labels = np.array([1, 1, 0, 0])  # Actual labels for the new test images
loss, accuracy = model.evaluate(new_test_images, true_labels)
print(f"Loss: {loss}, Accuracy: {accuracy}")

# Display the new test images with predictions
plt.figure(figsize=(10, 5))
for i in range(len(new_test_images)):
    plt.subplot(1, 4, i + 1)
    plt.imshow(new_test_images[i][:,:,0], cmap='gray')  # Show the first channel as a grayscale image
    predicted_class = "no defects" if np.argmax(predictions[i]) == 1 else "pore defects"
    plt.title(f"{predicted_class}")
    plt.axis('off')
plt.show()
