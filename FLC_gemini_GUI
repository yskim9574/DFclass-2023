import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np
from scipy.optimize import fsolve
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import threading
import time

# --- M-K Calculation Core Logic (Functions only - NO CHANGES HERE) ---
# ... (Keep the calculate_hill_params, equilibrium_equation, calculate_fld functions exactly as they were in the previous working version) ...
def calculate_hill_params(rho, R_val):
    """Calculates alpha, phi, and beta based on strain ratio rho and R."""
    denominator = (1.0 + R_val) + R_val * rho
    if abs(denominator) < 1e-9: return np.nan, np.nan, np.nan
    alpha = (R_val + (1.0 + R_val) * rho) / denominator
    phi_sq_term = 1.0 - (2.0 * R_val / (1.0 + R_val)) * alpha + alpha**2
    if phi_sq_term < -1e-9: return np.nan, np.nan, np.nan
    phi_sq_term = max(0, phi_sq_term)
    phi = np.sqrt(phi_sq_term)
    if phi < 1e-9: return alpha, phi, np.nan
    beta = (1.0 + alpha * rho) / phi
    if beta <= 1e-9: return alpha, phi, np.nan
    return alpha, phi, beta

def equilibrium_equation(delta_eps1_B_guess, current_strains, delta_eps1_A,
                         rho_A, alpha_A, phi_A, beta_A,
                         K_mat, n_mat, m_mat, f0_imp, R_anis):
    if any(np.isnan([alpha_A, phi_A, beta_A])) or phi_A < 1e-9 or beta_A <= 1e-9: return 1e10
    delta_eps2_A = rho_A * delta_eps1_A
    delta_eps_eq_A = beta_A * delta_eps1_A
    eps1_A_next = current_strains['eps1_A'] + delta_eps1_A
    eps2_A_next = current_strains['eps2_A'] + delta_eps2_A
    eps_eq_A_next = current_strains['eps_eq_A'] + delta_eps_eq_A
    eps3_A_next = -(eps1_A_next + eps2_A_next)
    delta_eps1_B = max(delta_eps1_B_guess, 1e-12)
    delta_eps2_B = delta_eps2_A
    if abs(delta_eps1_B) < 1e-12: rho_B = np.sign(delta_eps2_B) * 1e12 if delta_eps2_B != 0 else 0
    else: rho_B = delta_eps2_B / delta_eps1_B
    alpha_B, phi_B, beta_B = calculate_hill_params(rho_B, R_anis)
    if any(np.isnan([alpha_B, phi_B, beta_B])) or phi_B < 1e-9 or beta_B <= 1e-9: return 1e6
    delta_eps_eq_B = beta_B * delta_eps1_B
    if delta_eps_eq_B <= 0: return 1e6
    eps1_B_next = current_strains['eps1_B'] + delta_eps1_B
    eps2_B_next = current_strains['eps2_B'] + delta_eps2_B
    eps_eq_B_next = current_strains['eps_eq_B'] + delta_eps_eq_B
    eps3_B_next = -(eps1_B_next + eps2_B_next)
    if delta_eps1_A <= 1e-12: strain_rate_factor_B = 1.0
    else: strain_rate_factor_B = (delta_eps1_B / delta_eps1_A)**m_mat
    thickness_ratio = f0_imp * np.exp(eps3_B_next - eps3_A_next)
    eps_eq_A_eff = max(eps_eq_A_next, 1e-12)
    eps_eq_B_eff = max(eps_eq_B_next, 1e-12)
    lhs = (eps_eq_A_eff)**n_mat / phi_A
    rhs = ((eps_eq_B_eff)**n_mat * strain_rate_factor_B / phi_B) * thickness_ratio
    residual = lhs - rhs
    if np.isnan(residual): return 1e6
    return residual

def calculate_fld(params, progress_callback=None):
    try:
        K = params['K']; n = params['n']; m = params['m']; f0 = params['f0']; R = params['R']
        initial_strain_A = params.get('initial_strain_A', 1e-6); delta_eps1_A_increment = params.get('delta_eps1_A_increment', 5e-4)
        necking_criterion_ratio = params.get('necking_criterion_ratio', 0.15); max_steps = params.get('max_steps', 2000)
        num_rho_points = params.get('num_rho_points', 11)
        fld_points = []; rho_A_values = np.linspace(1.0, 0.0, num_rho_points); total_paths = len(rho_A_values)
        for i, rho_A in enumerate(rho_A_values):
            if progress_callback: progress_callback(f"Processing rho_A = {rho_A:.2f} ({i+1}/{total_paths})")
            strains = {'eps1_A': initial_strain_A, 'eps2_A': rho_A * initial_strain_A, 'eps_eq_A': 0.0,
                       'eps1_B': initial_strain_A, 'eps2_B': rho_A * initial_strain_A, 'eps_eq_B': 0.0}
            alpha_A_init, phi_A_init, beta_A_init = calculate_hill_params(rho_A, R)
            if np.isnan(beta_A_init): print(f"Warning: Init Hill params fail rho_A={rho_A:.2f}. Skip."); continue
            strains['eps_eq_A'] = beta_A_init * strains['eps1_A']; strains['eps_eq_B'] = strains['eps_eq_A']
            alpha_A, phi_A, beta_A = alpha_A_init, phi_A_init, beta_A_init
            if strains['eps_eq_A'] <= 0 : continue
            limit_strain_found = False; path_failed = False
            for step in range(max_steps):
                if any(np.isnan([alpha_A, phi_A, beta_A])): print(f"Error: Invalid A params step {step} rho_A={rho_A:.2f}. Stop."); path_failed = True; break
                delta_eps1_A = delta_eps1_A_increment; initial_guess_delta_eps1_B = delta_eps1_A / f0
                try:
                    delta_eps1_B_solution, info, ier, msg = fsolve(equilibrium_equation, x0=initial_guess_delta_eps1_B, args=(strains, delta_eps1_A, rho_A, alpha_A, phi_A, beta_A, K, n, m, f0, R), full_output=True, xtol=1e-7)
                    if ier != 1:
                         delta_eps1_B_solution, info, ier, msg = fsolve(equilibrium_equation, x0=initial_guess_delta_eps1_B*1.05, args=(strains, delta_eps1_A, rho_A, alpha_A, phi_A, beta_A, K, n, m, f0, R), full_output=True, xtol=1e-7)
                         if ier != 1: print(f"Warning: fsolve fail step {step} rho_A={rho_A:.2f}. ier={ier}. Stop."); path_failed = True; break
                except Exception as e: print(f"Error: fsolve EXCEPTION step {step} rho_A={rho_A:.2f}: {e}"); path_failed = True; break
                delta_eps1_B = delta_eps1_B_solution[0]
                if np.isnan(delta_eps1_B) or delta_eps1_B <= 1e-12: print(f"Warning: Invalid delta_eps1_B ({delta_eps1_B:.2e}) step {step}. Stop."); path_failed = True; break
                if delta_eps1_B < 1e-12: strain_increment_ratio = 0
                else: strain_increment_ratio = delta_eps1_A / delta_eps1_B
                if strain_increment_ratio < necking_criterion_ratio: fld_points.append((strains['eps1_A'], strains['eps2_A'])); limit_strain_found = True; break
                delta_eps2_A = rho_A * delta_eps1_A; delta_eps_eq_A = beta_A * delta_eps1_A; delta_eps2_B = delta_eps2_A
                if abs(delta_eps1_B) < 1e-12: rho_B = np.sign(delta_eps2_B) * 1e12 if delta_eps2_B != 0 else 0
                else: rho_B = delta_eps2_B / delta_eps1_B
                alpha_B_upd, phi_B_upd, beta_B_upd = calculate_hill_params(rho_B, R)
                if any(np.isnan([alpha_B_upd, phi_B_upd, beta_B_upd])): print(f"Error: Invalid B params update step {step}. Stop."); path_failed = True; break
                delta_eps_eq_B = beta_B_upd * delta_eps1_B
                if delta_eps_eq_B <= 0: print(f"Warning: Non-positive delta_eps_eq_B ({delta_eps_eq_B:.2e}) step {step}. Stop."); path_failed = True; break
                strains['eps1_A'] += delta_eps1_A; strains['eps2_A'] += delta_eps2_A; strains['eps_eq_A'] += delta_eps_eq_A
                strains['eps1_B'] += delta_eps1_B; strains['eps2_B'] += delta_eps2_B; strains['eps_eq_B'] += delta_eps_eq_B
            if path_failed: print(f"  Path failed for rho_A = {rho_A:.2f}")
            elif not limit_strain_found and step == max_steps - 1: print(f"Warning: Max steps rho_A={rho_A:.2f}. Store last."); fld_points.append((strains['eps1_A'], strains['eps2_A']))
        if not fld_points: return False, "Calculation failed: No FLD points generated."
        return True, np.array(fld_points)
    except Exception as e: import traceback; print(f"Error in calculate_fld: {e}"); traceback.print_exc(); return False, f"Calculation Error: {e}"

# --- Tkinter GUI Application ---
class FLCApp:
    def __init__(self, master):
        self.master = master
        master.title("FLD Calculator (M-K, Hill48) - Overlay") # Updated title
        master.geometry("850x750") # Slightly larger window

        self.params = {}
        self.calculation_thread = None
        self.calculation_running = False
        self.fld_results_from_thread = None # Store raw result from thread
        self.plotted_data = [] # List to store tuples: (points_array, params_dict, plot_label)

        # Style
        style = ttk.Style()
        style.configure("TLabel", padding=3); style.configure("TEntry", padding=3); style.configure("TButton", padding=5); style.configure("TCheckbutton", padding=3)

        # Define Default Values Locally
        default_K = 300.0; default_n = 0.25; default_m = 0.005; default_f0 = 0.997; default_R = 1.6

        # --- Input Frame ---
        input_frame = ttk.Frame(master, padding="10"); input_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5) # Pack on left
        ttk.Label(input_frame, text="Material Parameters:").grid(row=0, column=0, columnspan=2, sticky="w", pady=5)

        param_labels_and_keys = [("K (MPa):", "K"), ("n:", "n"), ("m:", "m"), ("f₀:", "f0"), ("R:", "R")]
        param_defaults = [str(default_K), str(default_n), str(default_m), str(default_f0), str(default_R)]
        self.entries = {}
        for i, (label_text, key) in enumerate(param_labels_and_keys):
            label = ttk.Label(input_frame, text=label_text)
            label.grid(row=i+1, column=0, sticky="w", padx=5, pady=2)
            entry = ttk.Entry(input_frame, width=15)
            entry.grid(row=i+1, column=1, padx=5, pady=2, sticky="w")
            entry.insert(0, param_defaults[i])
            self.entries[key] = entry

        # --- Control Frame (below inputs) ---
        control_frame = ttk.Frame(input_frame) # Add controls below inputs in the same frame
        control_frame.grid(row=len(param_labels_and_keys)+1, column=0, columnspan=2, pady=15, sticky="ew")

        self.calc_button = ttk.Button(control_frame, text="Calculate FLD", command=self.start_calculation)
        self.calc_button.pack(side=tk.TOP, pady=5)

        self.overlay_var = tk.BooleanVar(value=False) # Variable to hold checkbutton state
        self.overlay_check = ttk.Checkbutton(control_frame, text="Overlay Plot", variable=self.overlay_var)
        self.overlay_check.pack(side=tk.TOP, pady=5)

        self.clear_button = ttk.Button(control_frame, text="Clear Plot", command=self.clear_plot)
        self.clear_button.pack(side=tk.TOP, pady=5)

        self.status_label = ttk.Label(control_frame, text="Status: Ready", wraplength=180) # Allow status to wrap
        self.status_label.pack(side=tk.TOP, pady=10, fill=tk.X)

        # --- Plot Frame (Takes remaining space) ---
        plot_frame = ttk.Frame(master, padding="10")
        plot_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True) # Pack on right
        self.figure = plt.figure(figsize=(6, 6)) # Adjusted figure size
        self.ax = self.figure.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.figure, master=plot_frame)
        self.canvas_widget = self.canvas.get_tk_widget(); self.canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.toolbar = NavigationToolbar2Tk(self.canvas, plot_frame); self.toolbar.update(); self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)

        # Initialize plot
        self.plot_all_stored_data()
        self.canvas.draw()

    def get_parameters(self):
        """Reads parameters from entry fields and validates them."""
        try:
            params = {'K': float(self.entries['K'].get()), 'n': float(self.entries['n'].get()),
                      'm': float(self.entries['m'].get()), 'f0': float(self.entries['f0'].get()),
                      'R': float(self.entries['R'].get())}
            if not (0 < params['n'] < 1): raise ValueError("n must be 0 < n < 1")
            if params['m'] < 0: raise ValueError("m must be >= 0")
            if not (0 < params['f0'] < 1): raise ValueError("f0 must be 0 < f0 < 1")
            if params['R'] <= 0: raise ValueError("R must be > 0")
            params['initial_strain_A'] = 1e-6; params['delta_eps1_A_increment'] = 5e-4
            params['necking_criterion_ratio'] = 0.15; params['max_steps'] = 2000; params['num_rho_points'] = 11
            return params
        except ValueError as e: messagebox.showerror("Input Error", f"Invalid parameter: {e}"); return None
        except KeyError as e: messagebox.showerror("Input Error", f"Internal error: Missing key: {e}"); return None

    def update_status(self, message): self.status_label.config(text=f"Status: {message}")

    def create_plot_label(self, params):
        """Creates a concise label for the legend based on parameters."""
        # Customize this as needed - show key differentiating parameters
        return f"R={params.get('R','?')}, n={params.get('n','?')}, f₀={params.get('f0','?')}"


    def plot_all_stored_data(self):
        """Clears axes and plots ALL curves stored in self.plotted_data."""
        self.ax.clear()
        overall_min_minor = 0; overall_max_major = 0; data_exists = False
        markers = ['o', 's', '^', 'D', 'v', 'p', '*', 'h'] # Cycle through markers
        colors = plt.cm.viridis(np.linspace(0, 0.9, max(len(self.plotted_data),1))) # Get colors

        if not self.plotted_data:
             # Default view if no data stored
             self.ax.set_xlim(-0.4, 0.6); self.ax.set_ylim(0, 0.8)
             self.ax.text(0.5, 0.5, "Enter parameters and click Calculate", ha='center', va='center', transform=self.ax.transAxes)
        else:
            data_exists = True
            # Plot each stored dataset
            for i, (fld_points, params, label) in enumerate(self.plotted_data):
                if fld_points is not None and len(fld_points) > 0:
                    sorted_indices = np.argsort(fld_points[:, 1])
                    minor_strain = fld_points[sorted_indices, 1]
                    major_strain = fld_points[sorted_indices, 0]
                    self.ax.plot(minor_strain, major_strain,
                                 marker=markers[i % len(markers)],
                                 linestyle='-',
                                 color=colors[i % len(colors)], # Use color based on index
                                 label=label) # Use stored label

                    # Update overall plot limits
                    current_min_minor = np.min(minor_strain) if len(minor_strain)>0 else 0
                    current_max_major = np.max(major_strain) if len(major_strain)>0 else 0
                    if i == 0:
                        overall_min_minor = current_min_minor; overall_max_major = current_max_major
                    else:
                        overall_min_minor = min(overall_min_minor, current_min_minor)
                        overall_max_major = max(overall_max_major, current_max_major)

            # Set axis limits dynamically based on all plotted data
            max_major_plot = max(overall_max_major * 1.1, 0.5) if overall_max_major > 0 else 0.8
            min_minor_plot = min(overall_min_minor * 1.2, -0.1) if overall_min_minor < 0 else -0.4
            max_minor_plot = max(max_major_plot*0.8, overall_min_minor + 0.1) # Ensure x>min
            if len(self.plotted_data) > 0: # Adjust max X based on plotted data
                all_max_minor = [np.max(d[0][:,1]) for d in self.plotted_data if d[0] is not None and len(d[0])>0 and np.max(d[0][:,1])>0]
                if all_max_minor: max_minor_plot = max(max_minor_plot, np.max(all_max_minor)*1.1)

            self.ax.set_xlim(min_minor_plot, max_minor_plot)
            self.ax.set_ylim(0, max_major_plot)
            self.ax.legend() # Show legend for all plotted curves

            # Add strain path lines (only needs latest params for num_rho_points)
            rho_paths = np.linspace(1.0, 0.0, self.plotted_data[-1][1].get('num_rho_points', 11))
            for rho_line in rho_paths:
                 if abs(rho_line)<1e-6: self.ax.plot([0,0],[0,max_major_plot],'k:',lw=0.7,alpha=0.4)
                 else:
                    eps1_line=np.array([0, max_major_plot]); eps2_line=eps1_line*rho_line
                    valid=(eps2_line >= min_minor_plot-0.1) & (eps2_line <= max_minor_plot+0.1)
                    if np.any(valid): self.ax.plot(eps2_line[valid], eps1_line[valid], 'k:', lw=0.7, alpha=0.4)


        # Set common plot elements
        self.ax.set_title(f"FLD Comparison (M-K, Hill48)") # More generic title
        self.ax.set_xlabel("Minor Principal Strain (ε₂)"); self.ax.set_ylabel("Major Principal Strain (ε₁)")
        self.ax.axhline(0, color='gray', linestyle='--', linewidth=0.8); self.ax.axvline(0, color='gray', linestyle='--', linewidth=0.8)
        self.ax.grid(True, linestyle=':'); self.ax.axis('equal'); self.canvas.draw()

    def handle_new_result(self, new_points, new_params):
        """Adds new result to stored data and triggers replotting."""
        if not self.overlay_var.get(): # Check if overlay is OFF
            self.plotted_data.clear() # Clear previous results

        # Create a label for this specific calculation
        label = self.create_plot_label(new_params)

        # Add the new data, parameters, and label to the list
        self.plotted_data.append((new_points, new_params.copy(), label)) # Store a copy of params

        # Redraw the plot with all stored data
        self.plot_all_stored_data()

    def clear_plot(self):
        """Clears stored data and redraws an empty plot."""
        self.plotted_data.clear()
        self.plot_all_stored_data() # Will plot the empty state
        self.update_status("Plot cleared.")


    def check_calculation_thread(self):
        """Checks if the calculation thread has finished and handles result."""
        if self.calculation_thread and not self.calculation_thread.is_alive():
            self.calculation_running = False; self.calc_button.config(state=tk.NORMAL)
            success, result = self.fld_results_from_thread # Get result stored by worker
            if success:
                self.update_status("Processing results...")
                # Pass result and the params used for *this* calculation
                self.handle_new_result(result, self.params)
                self.update_status("Calculation Complete.")
            else:
                messagebox.showerror("Calculation Error", result)
                self.update_status(f"Error.")
            self.fld_results_from_thread = None; self.calculation_thread = None
        elif self.calculation_running: self.master.after(200, self.check_calculation_thread)

    def calculation_worker(self, params):
        """Worker function executed by the thread."""
        # Store result in self.fld_results_from_thread
        self.fld_results_from_thread = calculate_fld(params, self.update_status_threadsafe)

    def update_status_threadsafe(self, message):
        """ Safely update status label from calculation thread """
        self.master.after(0, self.update_status, message)

    def start_calculation(self):
        """Callback for the 'Calculate FLD' button."""
        if self.calculation_running: messagebox.showwarning("Busy", "Calculation already running."); return
        params = self.get_parameters();
        if params is None: return
        self.params = params # Store params used for this specific calculation
        self.update_status("Calculating..."); self.calc_button.config(state=tk.DISABLED)
        self.calculation_running = True; self.fld_results_from_thread = None
        self.calculation_thread = threading.Thread(target=self.calculation_worker, args=(params,)); self.calculation_thread.daemon = True; self.calculation_thread.start()
        self.master.after(100, self.check_calculation_thread)

# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk(); app = FLCApp(root); root.mainloop()
