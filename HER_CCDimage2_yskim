import cv2
import matplotlib.pyplot as plt

# Load the RGB image
image_path = 'HER.JPG'
rgb_image = cv2.imread(image_path)

# Convert RGB image to grayscale
gray_image = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)

# Apply Gaussian blur to reduce noise
blurred_image = cv2.GaussianBlur(gray_image, (5, 5), 0)

# Apply Canny edge detection
edges = cv2.Canny(blurred_image, 200, 530)

# Find contours of the edges
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Create a mask to retain only the largest contour (inside circle)
mask = cv2.drawContours(np.zeros_like(gray_image), contours, -1, (150), thickness=cv2.FILLED)

# Apply the mask to the edge image
filtered_edges = cv2.bitwise_and(edges, mask)

# Display the original image, grayscale image, and filtered edges
plt.figure(figsize=(12, 6))

plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(rgb_image, cv2.COLOR_BGR2RGB))
plt.title('Original RGB Image')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(gray_image, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(filtered_edges, cmap='gray')
plt.title('Filtered Edges')
plt.axis('off')

plt.show()
