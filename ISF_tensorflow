import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD

# Given training data and labels
train_data = np.array([[1, 0.666,0.666,0.333], [0.8, 0.666, 0.333,0.333],
                       [0.8,0.333,1,0.666], [1,0.666,1,0.666], 
                       [0.6, 0.666, 0.666, 0.333]])

train_label = np.array([[0.9819],[0.9975],[0.9857],[0.9799],[1]])

# Given test data
test_data = np.array([[0.8,1,0.666,1]])

# Create a sequential model with 1 hidden layer of 3 neurons
model = Sequential([
    Dense(3, input_shape=(4,), activation='relu'),  # Changed to 3 neurons in this line
    Dense(1, activation='linear')
])

#In Keras, biases are included in layers by default. You don't need to add anything extra to include biases in your model. Each neuron in a layer has its own bias unit in Keras.
# Compile the model
model.compile(optimizer=SGD(lr=0.01), loss='mean_squared_error')

# Train the model and record the training loss values
history = model.fit(train_data, train_label, epochs=500, verbose=0)

# Predict the label for the test data
test_label = model.predict(test_data)

# Plot the training loss values
plt.plot(history.history['loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.show()

# Print the prediction for the test data
print(f"The predicted label for test data {test_data[0]} is {test_label[0][0]:.4f}")
