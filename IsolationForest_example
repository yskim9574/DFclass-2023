import matplotlib.pyplot as plt
import numpy as np
from sklearn.ensemble import IsolationForest

# Given dataset
X = np.array([[45, 100], [57, 120], [63, 90], [65, 145], [80, 110], [85, 75], 
[90, 130], [100, 120], [110, 95], [115, 70], [110, 52], [95, 160], [180, 152]])

# Create the IsolationForest model
model = IsolationForest(random_state=42)

# Fit the model
model.fit(X)
print('decision_function')
print(model.decision_function(X). round(4))
# Predict the anomaly scores for the dataset (converted to the range of 0 to 1)
scores = 0.5 - model.decision_function(X)
print('scores:')
print(scores. round(4))

# Predict if a data point is an outlier
anomaly = model.predict(X)
print('anomaly')
print(anomaly)

# Combine the dataset, converted anomaly scores, and whether it's an outlier
results = np.column_stack((X, scores, anomaly))

# Filter and show the anomalies with their converted scores
anomalies_with_converted_scores = results[results[:, -1] == -1, :-1]

# Plotting
plt.figure(figsize=(7, 5))

# Plot normal data as circles
normal_data = X[anomaly == 1]
plt.scatter(normal_data[:, 0], normal_data[:, 1], color='blue', label='Normal Data', marker='o')

# Plot anomalies as stars
anomalies = X[anomaly == -1]
plt.scatter(anomalies[:, 0], anomalies[:, 1], color='red', label='Anomalies', marker='*')

# Adding labels and title
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Isolation Forest Anomaly Detection with Different Shapes')
plt.legend()

# Show the plot
plt.show()

print('score for[47,120],[110,120],[135,80],[142,155] is,')
print(0.5-model.decision_function([[47,120],[110,120],[135,80],[142,155]]). round(4))

