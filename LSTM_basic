import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from keras.models import Model
from keras.layers import Input, LSTM, RepeatVector

# 5 sequences, 3 timesteps per sequence, 2 features per timestep
inputdata = (0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 
        1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4)

# Reshape to [4,3,2]
data = np.array(inputdata).reshape([4,3,2])

print('reshape input data')
print(data)

# Define the number of features, timesteps, and latent dimensions
timesteps = 3
input_dim = 2
latent_dim = 1  # Dimensionality of the encoded representation

# Define the LSTM autoencoder
inputs = Input(shape=(timesteps, input_dim))
encoded = LSTM(latent_dim)(inputs)

# We repeat the encoded representation for each time step
decoded = RepeatVector(timesteps)(encoded)
decoded = LSTM(input_dim, return_sequences=True)(decoded)

# Autoencoder model
autoencoder = Model(inputs, decoded)

# Compile the model
autoencoder.compile(optimizer='adam', loss='mse')

# Train the autoencoder
autoencoder.fit(data, data, epochs=100, batch_size=1)

# To encode data, use the encoder part
encoder = Model(inputs, encoded)

# To encode the input data into the lower-dimensional representation
# (compressed representation of the input data)
encoded_data = encoder.predict(data)
print('encoded data')
print(encoded_data)

# To reconstruct the input data from the encoded representation, 
# use the autoencoder(reconstruction is an approximation of the original data)
decoded_data = autoencoder.predict(data)
print('decoded_data')
print(decoded_data)

# Print the shapes for confirmation
print("Original Data Shape:", data.shape)
print("Encoded Data Shape:", encoded_data.shape)
print("Decoded Data Shape:", decoded_data.shape)

# Train the autoencoder and save the history
history = autoencoder.fit(data, data, epochs=100, batch_size=1).history

# Plotting the loss-epoch curve
plt.plot(history['loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.show()
