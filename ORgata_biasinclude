# Import required libraries:
import numpy as np # Define input features
import matplotlib.pyplot as plt

input_features = np.array([[0,0],[0,1],[1,0],[1,1]])
print (input_features.shape)
print (input_features)# Define target output:
 
target_output = np.array([[0,1,1,1]])# Reshaping our target output into vector:
target_output = target_output.reshape(4,1)
print(target_output.shape)
print (target_output)# Define weights:
weights = np.array([[0.2],[0.3]])
print("Begining weights:",weights) 

bias = 0.5# Learning Rate:
alpha = 0.05# Sigmoid function:
def sigmoid(x):
 return 1/(1+np.exp(-x))# Derivative of sigmoid function:
def sigmoid_der(x):
 return sigmoid(x)*(1-sigmoid(x))# Main logic for neural network:
# Running our code 10000 times:

for epoch in range(10000):
  inputs = input_features #Feedforward input:
in_o = np.dot(inputs, weights) + bias #Feedforward output:
out_o = sigmoid(in_o) #Backpropogation
# Calculating error
error = out_o - target_output
# Going with the formula:
x = error.sum()
print('Output',x)
# Calculating derivative:
derror_douto = error
douto_dino = sigmoid_der(out_o)
# Multiplying individual derivatives:
deriv = derror_douto * douto_dino #Multiplying with the 3rd individual derivative:
# Finding the transpose of input_features:
inputs = input_features.T
deriv_final = np.dot(inputs,deriv)
# Updating the weights values:
weights -= alpha * deriv_final #Updating the bias weight value:
for i in deriv:
 bias -= alpha * i #Check the final bias
print ("Ending weights after training:", weights)
print ("Ending Bias after training:", bias) 

x1 = np.array ([0., 0., 1., 1.], dtype = np.float32)
x2 = np.array ([0., 1., 0., 1.], dtype = np.float32)
y  = np.array ([0., 1., 1., 1. ],dtype = np.float32)
plt.scatter(x1, x2, c=y)

new_point = np.array([1,0]) #1st step:
result1 = np.dot(new_point, weights) + bias #2nd step:
result2 = sigmoid(result1) #Print final result
print("New Output data [1,0]:", result2) #Taking inputs:
new_point = np.array([1,1]) #1st step:
result1 = np.dot(new_point, weights) + bias #2nd step:
result2 = sigmoid(result1) #Print final result
print("New Output data [1,1]:",result2) #Taking inputs:
