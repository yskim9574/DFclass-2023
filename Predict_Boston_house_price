import pandas as pd
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('boston.csv')
print(df.head())

# remove a specific column (axis=1) or row (axis=0) from a DataFrame.
X = df.drop('MEDV', axis=1) 
y = df['MEDV']

# Split the dataset into a training set (80%) and a testing set (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Number of training samples: {X_train.shape[0]}")
print(f"Number of test samples: {X_test.shape[0]}")

# Create a Linear Regression model and train it on the training data
model = LinearRegression()
model.fit(X_train, y_train)

# Use the trained model to predict the prices in the testing set
y_pred = model.predict(X_test)
print(X_test)
print()

# Print the predictions and compare with the real value for the first few row
print("Actual Prices")
print(y_test[:5])
print("Predicted Prices")
print(y_pred[:5].round(3))

# If you want to visualize the predictions against the actual prices, you can use matplotlib
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices-MEDV")
plt.ylabel("Predicted Prices-MEDV")
plt.title("Actual Prices vs Predicted Prices")
plt.show() 

# "corr" refers to the correlation coefficient,
corr_matrix=df.corr()

# show correlation matrix for the DataFrame with Correlation coefficients range from -1 to 1, 
 
corr_order=df.corr().loc[:'LSTAT','MEDV'].abs().sort_values(ascending=False)
print(corr_order.head(6).round(3))

# plot heatmap
plt.figure(figsize=(10,10))
sns.set(font_scale=0.8)
sns.heatmap(corr_matrix, annot=True, cbar=False)
plt.show()
