!pip install PyWavelets
import numpy as np
import matplotlib.pyplot as plt
import pywt

# Generate a sample signal
t = np.linspace(0, 1, 1000, endpoint=False)
signal = np.sin(2 * np.pi * 10 * t) + np.sin(2 * np.pi * 20 * t)

# Add some noise
noisy_signal = signal + np.random.normal(0, 0.5, signal.shape)

# Perform wavelet denoising
def wavelet_denoising(data, wavelet='db4', level=5):
    # Decompose the signal
    coeff = pywt.wavedec(data, wavelet, mode="per", level=level)
    
    # Calculate the threshold
    sigma = (1/0.6745) * np.median(np.abs(coeff[-1] - np.median(coeff[-1])))
    threshold = sigma * np.sqrt(2 * np.log(len(data)))
    
    # Apply soft thresholding
    new_coeff = [pywt.threshold(i, value=threshold, mode='soft') for i in coeff]
    
    # Reconstruct the signal
    return pywt.waverec(new_coeff, wavelet, mode="per")

# Apply denoising
denoised_signal = wavelet_denoising(noisy_signal)

# Plot the results
plt.figure(figsize=(12, 8))
plt.subplot(3, 1, 1)
plt.plot(t, signal)
plt.title('Original Signal')
plt.subplot(3, 1, 2)
plt.plot(t, noisy_signal)
plt.title('Noisy Signal')
plt.subplot(3, 1, 3)
plt.plot(t, denoised_signal)
plt.title('Denoised Signal')
plt.tight_layout()
plt.show()
