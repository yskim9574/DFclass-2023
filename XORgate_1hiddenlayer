import numpy as np 
#np.random.seed(0)

def sigmoid (x):
    return 1/(1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

#Input datasets
training_input = np.array([[0,0],[0,1],[1,0],[1,1]])
target_output = np.array([[0],[1],[1],[0]])

epoch = 10000
alpha = 0.1
inputLayerNeurons, hiddenLayerNeurons, outputLayerNeurons = 2,2,1

hidden_weights=np.array([[0.1, 0.2], [0.3,0.4]])
hidden_bias=np.array([[0.1, 0.2]])
output_weights=np.array([[0.5], [0.6]])
output_bias=np.array([[0.3]])

#Random weights and bias initialization
#hidden_weights = np.random.uniform(size=(inputLayerNeurons,hiddenLayerNeurons))
#hidden_bias =np.random.uniform(size=(1,hiddenLayerNeurons))
#output_weights = np.random.uniform(size=(hiddenLayerNeurons,outputLayerNeurons))
#output_bias = np.random.uniform(size=(1,outputLayerNeurons))

print("Initial hidden weights: ",end='')
print(*hidden_weights)
print("Initial hidden biases: ",end='')
print(*hidden_bias)
print("Initial output weights: ",end='')
print(*output_weights)
print("Initial output biases: ",end='')
print(*output_bias)

#Training algorithm
for iteration in range(epoch):
  #Forward Propagation
  hidden_layer_activation = np.dot(training_input,hidden_weights)
  hidden_layer_activation += hidden_bias
  hidden_layer_output = sigmoid(hidden_layer_activation)

  output_layer_activation = np.dot(hidden_layer_output,output_weights)
  output_layer_activation += output_bias
  predicted_output = sigmoid(output_layer_activation)

  #Back Propagation
  error = target_output - predicted_output
  d_predicted_output = error * sigmoid_derivative(predicted_output)
  
  error_hidden_layer = d_predicted_output.dot(output_weights.T)
  d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

  #Updating Weights and Biases
  output_weights += hidden_layer_output.T.dot(d_predicted_output) * alpha
  output_bias += np.sum(d_predicted_output,axis=0,keepdims=True) * alpha
  hidden_weights += training_input.T.dot(d_hidden_layer) * alpha
  hidden_bias += np.sum(d_hidden_layer,axis=0,keepdims=True) * alpha

print("Final hidden weights: ",end='')
print(*hidden_weights)
print("Final hidden bias: ",end='')
print(*hidden_bias)
print("Final output weights: ",end='')
print(*output_weights)
print("Final output bias: ",end='')
print(*output_bias)
print("Predicted output after training: ",end='')
print(*predicted_output)  # compare with print(predicted_output)
