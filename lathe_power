import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

# Parameters
f = 0.05           # mm/rev
N = 6000           # rev/min
sigma_y = 100      # MPa
D0 = 9.09          # Initial diameter in mm
n_trials = 20      # Number of tolerance trials

# Generate process length array (mm)
length = np.linspace(0, 135.5, 200)

# Nominal target diameters per section (mm)
targets = {
    'sec1': 8.04,    # 0–10.22 mm
    'sec2': 7.97,    # 10.22–17.22 mm
    'sec3': 7.02,    # 17.22–111.58 mm (±0.03 mm tolerance)
    'sec4': 7.85,    # 111.58–124 mm (±0.01 mm tolerance)
    'sec5': 9.00     # 124–135.5 mm
}

# Section masks
masks = {
    'sec1': length <= 10.22,
    'sec2': (length > 10.22) & (length <= 17.22),
    'sec3': (length > 17.22) & (length <= 111.58),
    'sec4': (length > 111.58) & (length <= 124),
    'sec5': length > 124
}

# Pre-generate random tolerance deviations
dev_sec3 = np.random.uniform(-0.03, 0.03, size=n_trials)
dev_sec4 = np.random.uniform(-0.01, 0.01, size=n_trials)

# Prepare figure
fig, ax = plt.subplots(figsize=(6, 4))
line, = ax.plot([], [], linewidth=2)
ax.set_xlabel("Time (s)")
ax.set_ylabel("Cutting power $P_c$ (W)")
ax.set_title("Tolerance Trials: Cutting Power vs. Time")
ax.grid(True)

# Convert length to time (s)
feed_speed_mm_per_s = f * N / 60
time_s = length / feed_speed_mm_per_s

# Determine y-limits dynamically
# Compute Pc for nominal (no dev) to get full range
def compute_pc(target_d3, target_d4):
    # Compute section diameters (mean tool diameter)
    D = np.zeros_like(length)
    a_p = np.zeros_like(length)
    for sec, mask in masks.items():
        target = targets[sec]
        if sec == 'sec3':  # apply tolerance
            target += target_d3
        if sec == 'sec4':  # apply tolerance
            target += target_d4
        D[mask] = (D0 + target) / 2
        a_p[mask] = (D0 - target) / 2
    Pc = np.pi * sigma_y * f * a_p * D * N / 1000
    return Pc

# Get y-limits
all_Pc = np.array([compute_pc(dev_sec3[i], dev_sec4[i]) for i in range(n_trials)])
ymin, ymax = all_Pc.min(), all_Pc.max()
ax.set_xlim(0, time_s[-1])
ax.set_ylim(ymin * 0.9, ymax * 1.1)

# Animation update function
def init():
    line.set_data([], [])
    return line,

def update(frame):
    Pc = compute_pc(dev_sec3[frame], dev_sec4[frame])
    line.set_data(time_s, Pc)
    ax.set_title(f"Trial {frame+1}/{n_trials}")
    return line,

# Create and display animation
ani = FuncAnimation(fig, update, frames=n_trials, init_func=init, interval=500, blit=True)
HTML(ani.to_jshtml())
#ani.save('tolerance_trials.mp4', writer='ffmpeg', fps=2)
from google.colab import files
files.download('tolerance_trials.mp4')   # 또는 'tolerance_trials.gif'
