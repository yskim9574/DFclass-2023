import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np
import math
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import time # Using time module for sleep is not ideal for GUI, rely on tk.after

# --- Robot Arm Parameters ---
LINK_LENGTHS = [38.0, 38.0, 38.0] # Lengths of the 3 links
TOTAL_ARM_LENGTH = sum(LINK_LENGTHS)
NUM_LINKS = len(LINK_LENGTHS)

# --- Path Definition (From Image) ---
POINT_A = np.array([95.0, 0.0])
POINT_B = np.array([95.0, 45.0])
POINT_C = np.array([45.0, 95.0])
POINT_D = np.array([-15.0, 95.0])

# Path segments: list of (start_point, end_point, segment_duration) tuples
PATH_DATA = [
    (POINT_A, POINT_B, 5.0), # A -> B, 5 sec duration (Time 0 -> 5)
    (POINT_B, POINT_C, 5.0), # B -> C, 5 sec duration (Time 5 -> 10)
    (POINT_C, POINT_D, 5.0)  # C -> D, 5 sec duration (Time 10 -> 15)
]

# Calculate cumulative end times for each segment
CUMULATIVE_TIMES = np.cumsum([0.0] + [seg[2] for seg in PATH_DATA]) # [0.0, 5.0, 10.0, 15.0]
TOTAL_PATH_DURATION = CUMULATIVE_TIMES[-1]

# --- Initial Joint Positions (From Image - State at Time=0s, Point A) ---
INITIAL_JOINT_POSITIONS = [
    np.array([0.0, 0.0]),      # J0 (Base O)
    np.array([36.70, 9.83]),   # J1
    np.array([62.0, -18.9]), # J2
    np.array([95.0, 0.0])      # J3 (End Effector A)
]

# --- Simulation Parameters ---
TIME_STEP = 0.05 # Simulation update interval in seconds (smaller = smoother)
FABRIK_TOLERANCE = 0.1 # How close the end effector needs to be to the target (cm)
FABRIK_MAX_ITERATIONS = 25 # Max iterations for the IK solver

# --- FABRIK Inverse Kinematics (Unchanged from previous version) ---
def calculate_ik_fabrik(target_pos, joint_positions_initial):
    global LINK_LENGTHS, TOTAL_ARM_LENGTH, NUM_LINKS, FABRIK_TOLERANCE, FABRIK_MAX_ITERATIONS
    num_joints = NUM_LINKS + 1
    current_joint_positions = [p.copy() for p in joint_positions_initial]
    base_pos = current_joint_positions[0]
    target_pos = np.array(target_pos)
    dist_base_target = np.linalg.norm(target_pos - base_pos)
    # Add small buffer to reach check
    if dist_base_target > TOTAL_ARM_LENGTH + FABRIK_TOLERANCE: return None # Target out of reach

    current_end_effector_pos = current_joint_positions[-1]
    dist_diff = np.linalg.norm(current_end_effector_pos - target_pos)
    iterations = 0
    while dist_diff > FABRIK_TOLERANCE and iterations < FABRIK_MAX_ITERATIONS:
        # Backward pass
        current_joint_positions[-1] = target_pos
        for i in range(num_joints - 2, -1, -1):
            vec = current_joint_positions[i+1] - current_joint_positions[i]
            dist = np.linalg.norm(vec); dist = max(dist, 1e-6) # Avoid division by zero
            lambda_scale = LINK_LENGTHS[i] / dist
            current_joint_positions[i] = current_joint_positions[i+1] - lambda_scale * vec
        # Forward pass
        current_joint_positions[0] = base_pos
        for i in range(num_joints - 1):
            vec = current_joint_positions[i+1] - current_joint_positions[i]
            dist = np.linalg.norm(vec); dist = max(dist, 1e-6)
            lambda_scale = LINK_LENGTHS[i] / dist
            current_joint_positions[i+1] = current_joint_positions[i] + lambda_scale * vec
        current_end_effector_pos = current_joint_positions[-1]
        dist_diff = np.linalg.norm(current_end_effector_pos - target_pos)
        iterations += 1

    if dist_diff <= FABRIK_TOLERANCE:
        # Verify link lengths after solve (optional debug)
        # for i in range(NUM_LINKS):
        #     solved_len = np.linalg.norm(current_joint_positions[i+1] - current_joint_positions[i])
        #     if abs(solved_len - LINK_LENGTHS[i]) > FABRIK_TOLERANCE * 2:
        #         print(f"Warning: Link {i+1} length incorrect after FABRIK: {solved_len:.2f}")
        return current_joint_positions
    else:
        # print(f"FABRIK did not converge (dist={dist_diff:.3f})")
        return None # Did not converge


# --- Tkinter GUI Application ---
class RobotArmApp:
    def __init__(self, master):
        self.master = master
        master.title("3-Link Robot Arm Path Following")
        master.geometry("900x750")

        self.link_lengths = LINK_LENGTHS
        self.num_links = NUM_LINKS
        self.path_data = PATH_DATA
        self.cumulative_times = CUMULATIVE_TIMES
        self.total_path_duration = TOTAL_PATH_DURATION
        self.dt = TIME_STEP # Animation time step

        # Simulation State
        self.is_running = False
        self.simulation_time = 0.0
        # Initialize joint positions using the provided initial state
        self.joint_positions = [p.copy() for p in INITIAL_JOINT_POSITIONS]
        self.animation_job = None

        # --- GUI Setup ---
        control_frame = ttk.Frame(master, padding="10")
        control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5)

        ttk.Label(control_frame, text="Simulation Control", font=("Arial", 12, "bold")).pack(pady=10)

        self.start_button = ttk.Button(control_frame, text="Start", command=self.start_simulation)
        self.start_button.pack(pady=5, fill=tk.X)

        self.stop_button = ttk.Button(control_frame, text="Stop", command=self.stop_simulation, state=tk.DISABLED)
        self.stop_button.pack(pady=5, fill=tk.X)

        self.reset_button = ttk.Button(control_frame, text="Reset to Start (A)", command=self.reset_simulation)
        self.reset_button.pack(pady=5, fill=tk.X)

        ttk.Separator(control_frame, orient=tk.HORIZONTAL).pack(pady=15, fill=tk.X)

        self.status_label = ttk.Label(control_frame, text="Status: Ready", wraplength=150)
        self.status_label.pack(pady=5, fill=tk.X)
        self.time_label = ttk.Label(control_frame, text="Time: 0.00 s")
        self.time_label.pack(pady=5)
        self.pos_label = ttk.Label(control_frame, text="End Effector: (?.?, ?.?)")
        self.pos_label.pack(pady=5)
        self.joint_pos_labels = [] # Labels to display joint positions
        ttk.Label(control_frame, text="Joint Positions:").pack(pady=(10,2))
        for i in range(self.num_links + 1):
             lbl = ttk.Label(control_frame, text=f" J{i}: (?.?, ?.?)")
             lbl.pack(anchor='w')
             self.joint_pos_labels.append(lbl)

        # --- Plot Frame ---
        plot_frame = ttk.Frame(master, padding="10")
        plot_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        self.figure = plt.figure(figsize=(7, 7))
        self.ax = self.figure.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.figure, master=plot_frame)
        self.canvas_widget = self.canvas.get_tk_widget()
        self.canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.toolbar = NavigationToolbar2Tk(self.canvas, plot_frame)
        self.toolbar.update(); self.toolbar.pack(side=tk.BOTTOM, fill=tk.X)

        # Initialize Arm Position and Plot
        self.reset_simulation() # Sets initial state and plots


    def initialize_arm_position(self):
        """Sets the arm to the starting position from the image data."""
        # Directly use the coordinates provided in the image for t=0
        self.joint_positions = [p.copy() for p in INITIAL_JOINT_POSITIONS]
        print("Initialized arm position using provided data for Point A.")


    def draw_simulation_state(self, target_point=None):
        """Clears plot and redraws the path, points, and current arm position."""
        self.ax.clear()

        # Draw Path Segments & Points
        path_points = [seg[0] for seg in self.path_data] + [self.path_data[-1][1]] # A, B, C, D
        point_labels = ['A', 'B', 'C', 'D']
        path_colors = ['#6082B6', '#6082B6', '#6082B6'] # Use a consistent path color
        for i, (start, end, duration) in enumerate(self.path_data):
             self.ax.plot([start[0], end[0]], [start[1], end[1]], linestyle='--', color=path_colors[i], marker='', zorder=1)
        # Plot points and labels
        for i, p in enumerate(path_points):
            self.ax.plot(p[0], p[1], 'o', mfc='white', mec=path_colors[0], markersize=7, zorder=2) # White filled circles
            self.ax.text(p[0] + 3, p[1] + 3, f"{point_labels[i]}({p[0]:.0f},{p[1]:.0f})\n{self.cumulative_times[i]:.0f}sec", fontsize=9, zorder=4)

        # Draw Robot Arm Links and Joints
        joint_x = [p[0] for p in self.joint_positions]
        joint_y = [p[1] for p in self.joint_positions]
        # Use color similar to image for the arm
        self.ax.plot(joint_x, joint_y, 'o-', color='#367588', linewidth=3, markersize=8, mfc='black', mec='black', zorder=3, label='Robot Arm') # Darker joints
        self.ax.plot(0, 0, 'ks', markersize=10, label='Base O') # Base point labeled O
        self.ax.text(-5,-5,"O", fontsize=9, zorder=4) # Add O label

        # Draw link labels (l1, l2, l3) - approximate midpoint
        for i in range(self.num_links):
             mid_x = (joint_x[i] + joint_x[i+1]) / 2
             mid_y = (joint_y[i] + joint_y[i+1]) / 2
             self.ax.text(mid_x, mid_y - 5, f'$l_{i+1}$={self.link_lengths[i]:.0f}', fontsize=9, ha='center', zorder=4, color='#367588')


        # Draw current target point if provided
        if target_point is not None:
            self.ax.plot(target_point[0], target_point[1], 'g*', markersize=12, label='Target', zorder=2)

        # Set Plot Limits and Aspect Ratio
        all_x = [p[0] for p in path_points] + [0] + [p[0] for p in INITIAL_JOINT_POSITIONS] # Include initial joints
        all_y = [p[1] for p in path_points] + [0] + [p[1] for p in INITIAL_JOINT_POSITIONS] # Include initial joints
        x_min, x_max = min(all_x), max(all_x)
        y_min, y_max = min(all_y), max(all_y)
        x_range = x_max - x_min; y_range = y_max - y_min
        buffer = max(x_range, y_range) * 0.15; buffer = max(buffer, 30) # Increased buffer
        self.ax.set_xlim(x_min - buffer, x_max + buffer)
        self.ax.set_ylim(y_min - buffer, y_max + buffer)
        self.ax.set_aspect('equal', adjustable='box')
        self.ax.set_xlabel("X (cm)"); self.ax.set_ylabel("Y (cm)")
        self.ax.set_title("Robot Arm Path Following")
        self.ax.grid(True, linestyle=':')
        self.canvas.draw()

    def update_simulation(self):
        """Performs one step of the time-driven simulation animation."""
        if not self.is_running: return

        # 1. Increment simulation time
        self.simulation_time += self.dt
        # Stop precisely at the end time
        if self.simulation_time > self.total_path_duration:
            self.simulation_time = self.total_path_duration

        # 2. Determine current segment and interpolation factor
        current_segment_index = -1
        for i in range(len(self.cumulative_times) - 1):
            if self.cumulative_times[i] <= self.simulation_time <= self.cumulative_times[i+1]:
                current_segment_index = i; break
        if current_segment_index == -1 and self.simulation_time >= self.total_path_duration:
            current_segment_index = len(self.path_data) - 1 # Stay on last segment if time is exactly end time

        if current_segment_index == -1: # Error condition
            print(f"Error: Could not determine segment for time {self.simulation_time:.3f}")
            self.stop_simulation("Error finding segment."); return

        segment_start_time = self.cumulative_times[current_segment_index]
        segment_duration = self.path_data[current_segment_index][2]
        if segment_duration < 1e-6: lerp_factor = 1.0
        else: time_in_segment = self.simulation_time - segment_start_time; lerp_factor = min(max(0.0, time_in_segment / segment_duration), 1.0)

        # 3. Calculate target point
        segment_start_pt = self.path_data[current_segment_index][0]
        segment_end_pt = self.path_data[current_segment_index][1]
        target_point = segment_start_pt + lerp_factor * (segment_end_pt - segment_start_pt)

        # 4. Calculate Inverse Kinematics (FABRIK)
        # Use current positions as the starting guess for the solver
        solved_positions = calculate_ik_fabrik(target_point, self.joint_positions)

        # 5. Update arm state if IK successful
        if solved_positions:
            self.joint_positions = solved_positions
            self.status_label.config(text="Status: Running")
        else:
            # Keep last known good position if IK fails? Or stop? Stop is safer.
            self.stop_simulation(f"IK Failed at t={self.simulation_time:.2f}")
            self.draw_simulation_state(target_point) # Draw target where it failed
            return

        # 6. Update labels
        self.time_label.config(text=f"Time: {self.simulation_time:.2f} s")
        ee_pos = self.joint_positions[-1]
        self.pos_label.config(text=f"End Effector: ({ee_pos[0]:.1f}, {ee_pos[1]:.1f})")
        for i, pos in enumerate(self.joint_positions):
             self.joint_pos_labels[i].config(text=f" J{i}: ({pos[0]:.2f}, {pos[1]:.2f})") # More precision for joints

        # 7. Redraw
        self.draw_simulation_state(target_point)

        # 8. Continue or stop
        if self.simulation_time >= self.total_path_duration:
            self.stop_simulation("Path Finished.")
        else:
            self.animation_job = self.master.after(int(self.dt * 1000), self.update_simulation)

    def start_simulation(self):
        if self.is_running: return
        if self.simulation_time >= self.total_path_duration: self.reset_simulation()
        self.is_running = True
        self.start_button.config(state=tk.DISABLED); self.stop_button.config(state=tk.NORMAL)
        self.reset_button.config(state=tk.DISABLED); self.status_label.config(text="Status: Running")
        self.update_simulation() # Start the loop

    def stop_simulation(self, status_msg="Stopped"):
        if not self.is_running: return
        self.is_running = False
        if self.animation_job: self.master.after_cancel(self.animation_job); self.animation_job = None
        self.start_button.config(state=tk.NORMAL); self.stop_button.config(state=tk.DISABLED)
        self.reset_button.config(state=tk.NORMAL); self.status_label.config(text=f"Status: {status_msg}")

    def reset_simulation(self):
        self.stop_simulation("Reset")
        self.simulation_time = 0.0
        self.initialize_arm_position() # Use defined initial state
        # Update all labels based on initial state
        self.time_label.config(text="Time: 0.00 s")
        ee_pos = self.joint_positions[-1]
        self.pos_label.config(text=f"End Effector: ({ee_pos[0]:.1f}, {ee_pos[1]:.1f})")
        for i, pos in enumerate(self.joint_positions):
             self.joint_pos_labels[i].config(text=f" J{i}: ({pos[0]:.2f}, {pos[1]:.2f})")
        self.draw_simulation_state(target_point=self.path_data[0][0]) # Draw initial state
        self.status_label.config(text="Status: Ready")
        self.reset_button.config(state=tk.NORMAL)


# --- Main Execution ---
if __name__ == "__main__":
    root = tk.Tk()
    app = RobotArmApp(root)
    root.mainloop()
